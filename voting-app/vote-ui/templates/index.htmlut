<!DOCTYPE html>
<html>
<head>
    <title>Vote!</title>
    <style>
        body { font-family: sans-serif; display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh; background-color: #f0f0f0; }
        .container { background-color: #fff; padding: 40px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); text-align: center; }
        h1 { color: #333; }
        button {
            font-size: 2em;
            padding: 20px 40px;
            margin: 20px;
            cursor: pointer;
            border: none;
            border-radius: 5px;
            color: white;
            transition: background-color 0.3s ease;
        }
        #cats-button { background-color: #4CAF50; /* Green */ }
        #cats-button:hover { background-color: #45a049; }
        #dogs-button { background-color: #008CBA; /* Blue */ }
        #dogs-button:hover { background-color: #007ba7; }
        #message { margin-top: 20px; font-size: 1.1em; color: #555; height: 2em; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Which do you prefer?</h1>
        <button id="cats-button" onclick="sendVote('cats')">Cats üò∫</button>
        <button id="dogs-button" onclick="sendVote('dogs')">Dogs üê∂</button>
        <div id="message"></div>
    </div>

    <script>
        async function sendVote(option) {
            const messageDiv = document.getElementById('message');
            messageDiv.textContent = `Sending vote for ${option}...`;
            try {
                // Important: In OpenShift, this will call the internal service name
                // For local testing, adjust if needed (e.g., http://localhost:5001/vote/)
                // We assume the API is reachable via a relative path or configured base URL later
                const response = await fetch(`/api/vote/${option}`, { // Note the relative path /api/
                    method: 'POST',
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const result = await response.json();
                messageDiv.textContent = `Voted for ${option}! Current count: ${result.count}`;
            } catch (error) {
                console.error('Error sending vote:', error);
                messageDiv.textContent = `Error voting for ${option}. Please try again.`;
            }
            // Clear message after a few seconds
             setTimeout(() => { messageDiv.textContent = ''; }, 3000);
        }
    </script>
</body>
</html>